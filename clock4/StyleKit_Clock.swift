//
//  StyleKit_Clock.swift
//  Clock4
//
//  Created by Don Sleeter on 1/7/18.
//  Copyright Â© 2018 Stone Canyon. All rights reserved.
//
//  Generated by PaintCode
//  http://www.paintcodeapp.com
//



import UIKit

public class StyleKit_Clock : NSObject {

    //// Cache

    private struct Cache {
        static let numbersColor: UIColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)
        static let darkHandsColor: UIColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)
        static let lightHandColor: UIColor = UIColor(red: 0.941, green: 0.232, blue: 0.232, alpha: 0.827)
        static let rimColor: UIColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)
        static let tickColor: UIColor = UIColor(red: 0.638, green: 0.638, blue: 0.638, alpha: 1.000)
        static let faceColor: UIColor = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1.000)
        static let silverGradientColor: UIColor = UIColor(red: 0.928, green: 0.928, blue: 0.928, alpha: 1.000)
    }

    //// Colors

    @objc dynamic public class var numbersColor: UIColor { return Cache.numbersColor }
    @objc dynamic public class var darkHandsColor: UIColor { return Cache.darkHandsColor }
    @objc dynamic public class var lightHandColor: UIColor { return Cache.lightHandColor }
    @objc dynamic public class var rimColor: UIColor { return Cache.rimColor }
    @objc dynamic public class var tickColor: UIColor { return Cache.tickColor }
    @objc dynamic public class var faceColor: UIColor { return Cache.faceColor }
    @objc dynamic public class var silverGradientColor: UIColor { return Cache.silverGradientColor }

    //// Drawing Methods

    @objc dynamic public class func drawClock(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 260, height: 260), resizing: ResizingBehavior = .aspectFit, hours: CGFloat = 3, minutes: CGFloat = 42, seconds: CGFloat = 23) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 260, height: 260), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 260, y: resizedFrame.height / 260)


        //// Color Declarations
        let silverGradientColor2 = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1.000)

        //// Gradient Declarations
        let silverGradient = CGGradient(colorsSpace: nil, colors: [StyleKit_Clock.faceColor.cgColor, StyleKit_Clock.faceColor.blended(withFraction: 0.5, of: silverGradientColor2).cgColor, silverGradientColor2.cgColor, silverGradientColor2.blended(withFraction: 0.5, of: StyleKit_Clock.silverGradientColor).cgColor, StyleKit_Clock.silverGradientColor.cgColor] as CFArray, locations: [0, 0.68, 0.74, 0.92, 0.99])!

        //// Variable Declarations
        let expression = hours > 12 ? "PM" : "AM"
        let secondsAngle: CGFloat = -seconds / 60.0 * 360
        let minuteAngle: CGFloat = -(minutes / 60.0 * 360 - secondsAngle / 60.0)
        let hourAngle: CGFloat = -hours / 12.0 * 360 + minuteAngle / 12.0

        //// Oval 2 Drawing
        context.saveGState()
        context.translateBy(x: 130, y: 130)

        let oval2Path = UIBezierPath(ovalIn: CGRect(x: -116, y: -116, width: 232, height: 232))
        StyleKit_Clock.rimColor.setFill()
        oval2Path.fill()

        context.restoreGState()


        //// Oval Drawing
        context.saveGState()
        context.translateBy(x: 130, y: 130)

        let ovalPath = UIBezierPath(ovalIn: CGRect(x: -110, y: -110, width: 220, height: 220))
        context.saveGState()
        ovalPath.addClip()
        context.drawRadialGradient(silverGradient,
            startCenter: CGPoint(x: 0, y: 0), startRadius: 23.66,
            endCenter: CGPoint(x: 0, y: 0), endRadius: 109.8,
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()

        context.restoreGState()


        //// Bezier Drawing
        context.saveGState()
        context.translateBy(x: 130, y: 130)
        context.rotate(by: -(minuteAngle + 90) * CGFloat.pi/180)

        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 7.07, y: -7.07))
        bezierPath.addCurve(to: CGPoint(x: 9.54, y: -3), controlPoint1: CGPoint(x: 8.25, y: -5.89), controlPoint2: CGPoint(x: 9.07, y: -4.49))
        bezierPath.addLine(to: CGPoint(x: 95, y: -3))
        bezierPath.addLine(to: CGPoint(x: 95, y: 3))
        bezierPath.addLine(to: CGPoint(x: 9.54, y: 3))
        bezierPath.addCurve(to: CGPoint(x: 7.07, y: 7.07), controlPoint1: CGPoint(x: 9.07, y: 4.49), controlPoint2: CGPoint(x: 8.25, y: 5.89))
        bezierPath.addCurve(to: CGPoint(x: -7.07, y: 7.07), controlPoint1: CGPoint(x: 3.17, y: 10.98), controlPoint2: CGPoint(x: -3.17, y: 10.98))
        bezierPath.addCurve(to: CGPoint(x: -7.07, y: -7.07), controlPoint1: CGPoint(x: -10.98, y: 3.17), controlPoint2: CGPoint(x: -10.98, y: -3.17))
        bezierPath.addCurve(to: CGPoint(x: 7.07, y: -7.07), controlPoint1: CGPoint(x: -3.17, y: -10.98), controlPoint2: CGPoint(x: 3.17, y: -10.98))
        bezierPath.close()
        StyleKit_Clock.darkHandsColor.setFill()
        bezierPath.fill()

        context.restoreGState()


        //// Bezier 2 Drawing
        context.saveGState()
        context.translateBy(x: 130, y: 130)
        context.rotate(by: -(hourAngle + 90) * CGFloat.pi/180)

        let bezier2Path = UIBezierPath()
        bezier2Path.move(to: CGPoint(x: 7.07, y: -7.07))
        bezier2Path.addCurve(to: CGPoint(x: 8.66, y: -5), controlPoint1: CGPoint(x: 7.7, y: -6.44), controlPoint2: CGPoint(x: 8.24, y: -5.74))
        bezier2Path.addLine(to: CGPoint(x: 56, y: -5))
        bezier2Path.addLine(to: CGPoint(x: 56, y: 5))
        bezier2Path.addLine(to: CGPoint(x: 8.66, y: 5))
        bezier2Path.addCurve(to: CGPoint(x: 7.07, y: 7.07), controlPoint1: CGPoint(x: 8.24, y: 5.74), controlPoint2: CGPoint(x: 7.7, y: 6.44))
        bezier2Path.addCurve(to: CGPoint(x: -7.07, y: 7.07), controlPoint1: CGPoint(x: 3.17, y: 10.98), controlPoint2: CGPoint(x: -3.17, y: 10.98))
        bezier2Path.addCurve(to: CGPoint(x: -7.07, y: -7.07), controlPoint1: CGPoint(x: -10.98, y: 3.17), controlPoint2: CGPoint(x: -10.98, y: -3.17))
        bezier2Path.addCurve(to: CGPoint(x: 7.07, y: -7.07), controlPoint1: CGPoint(x: -3.17, y: -10.98), controlPoint2: CGPoint(x: 3.17, y: -10.98))
        bezier2Path.close()
        StyleKit_Clock.darkHandsColor.setFill()
        bezier2Path.fill()

        context.restoreGState()


        //// Bezier 3 Drawing
        context.saveGState()
        context.translateBy(x: 130, y: 130)
        context.rotate(by: -(secondsAngle + 90) * CGFloat.pi/180)

        let bezier3Path = UIBezierPath()
        bezier3Path.move(to: CGPoint(x: 4.24, y: -4.24))
        bezier3Path.addCurve(to: CGPoint(x: 5.92, y: -1), controlPoint1: CGPoint(x: 5.16, y: -3.33), controlPoint2: CGPoint(x: 5.72, y: -2.19))
        bezier3Path.addLine(to: CGPoint(x: 99, y: -1))
        bezier3Path.addLine(to: CGPoint(x: 99, y: 1))
        bezier3Path.addLine(to: CGPoint(x: 5.92, y: 1))
        bezier3Path.addCurve(to: CGPoint(x: 4.24, y: 4.24), controlPoint1: CGPoint(x: 5.72, y: 2.19), controlPoint2: CGPoint(x: 5.16, y: 3.33))
        bezier3Path.addCurve(to: CGPoint(x: -4.24, y: 4.24), controlPoint1: CGPoint(x: 1.9, y: 6.59), controlPoint2: CGPoint(x: -1.9, y: 6.59))
        bezier3Path.addCurve(to: CGPoint(x: -4.24, y: -4.24), controlPoint1: CGPoint(x: -6.59, y: 1.9), controlPoint2: CGPoint(x: -6.59, y: -1.9))
        bezier3Path.addCurve(to: CGPoint(x: 4.24, y: -4.24), controlPoint1: CGPoint(x: -1.9, y: -6.59), controlPoint2: CGPoint(x: 1.9, y: -6.59))
        bezier3Path.close()
        StyleKit_Clock.lightHandColor.setFill()
        bezier3Path.fill()

        context.restoreGState()


        //// Group
        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(rect: CGRect(x: 127, y: 20, width: 6, height: 8))
        StyleKit_Clock.tickColor.setFill()
        rectanglePath.fill()


        //// Rectangle 2 Drawing
        let rectangle2Path = UIBezierPath(rect: CGRect(x: 127, y: 232, width: 6, height: 8))
        StyleKit_Clock.tickColor.setFill()
        rectangle2Path.fill()




        //// Group 2
        context.saveGState()
        context.translateBy(x: 130, y: 130)
        context.rotate(by: 90 * CGFloat.pi/180)



        //// Rectangle 3 Drawing
        let rectangle3Path = UIBezierPath(rect: CGRect(x: -3, y: -110, width: 6, height: 8))
        StyleKit_Clock.tickColor.setFill()
        rectangle3Path.fill()


        //// Rectangle 4 Drawing
        let rectangle4Path = UIBezierPath(rect: CGRect(x: -3, y: 102, width: 6, height: 8))
        StyleKit_Clock.tickColor.setFill()
        rectangle4Path.fill()



        context.restoreGState()


        //// Group 3
        context.saveGState()
        context.translateBy(x: 130, y: 130)
        context.rotate(by: -30 * CGFloat.pi/180)



        //// Rectangle 5 Drawing
        let rectangle5Path = UIBezierPath(rect: CGRect(x: -3, y: -110, width: 6, height: 8))
        StyleKit_Clock.tickColor.setFill()
        rectangle5Path.fill()


        //// Rectangle 6 Drawing
        let rectangle6Path = UIBezierPath(rect: CGRect(x: -3, y: 102, width: 6, height: 8))
        StyleKit_Clock.tickColor.setFill()
        rectangle6Path.fill()



        context.restoreGState()


        //// Group 4
        context.saveGState()
        context.translateBy(x: 130, y: 130)
        context.rotate(by: -60 * CGFloat.pi/180)



        //// Rectangle 7 Drawing
        let rectangle7Path = UIBezierPath(rect: CGRect(x: -3, y: -110, width: 6, height: 8))
        StyleKit_Clock.tickColor.setFill()
        rectangle7Path.fill()


        //// Rectangle 8 Drawing
        let rectangle8Path = UIBezierPath(rect: CGRect(x: -3, y: 102, width: 6, height: 8))
        StyleKit_Clock.tickColor.setFill()
        rectangle8Path.fill()



        context.restoreGState()


        //// Group 5
        context.saveGState()
        context.translateBy(x: 130, y: 130)
        context.rotate(by: -120 * CGFloat.pi/180)



        //// Rectangle 9 Drawing
        let rectangle9Path = UIBezierPath(rect: CGRect(x: -3, y: -110, width: 6, height: 8))
        StyleKit_Clock.tickColor.setFill()
        rectangle9Path.fill()


        //// Rectangle 10 Drawing
        let rectangle10Path = UIBezierPath(rect: CGRect(x: -3, y: 102, width: 6, height: 8))
        StyleKit_Clock.tickColor.setFill()
        rectangle10Path.fill()



        context.restoreGState()


        //// Group 6
        context.saveGState()
        context.translateBy(x: 130, y: 130)
        context.rotate(by: -150 * CGFloat.pi/180)



        //// Rectangle 11 Drawing
        let rectangle11Path = UIBezierPath(rect: CGRect(x: -3, y: -110, width: 6, height: 8))
        StyleKit_Clock.tickColor.setFill()
        rectangle11Path.fill()


        //// Rectangle 12 Drawing
        let rectangle12Path = UIBezierPath(rect: CGRect(x: -3, y: 102, width: 6, height: 8))
        StyleKit_Clock.tickColor.setFill()
        rectangle12Path.fill()



        context.restoreGState()


        //// Text 13 Drawing
        let text13Rect = CGRect(x: 99, y: 144, width: 62, height: 34)
        let text13Style = NSMutableParagraphStyle()
        text13Style.alignment = .center
        let text13FontAttributes = [
            .font: UIFont(name: "AvenirNext-DemiBold", size: 20)!,
            .foregroundColor: StyleKit_Clock.numbersColor,
            .paragraphStyle: text13Style,
        ] as [NSAttributedStringKey: Any]

        let text13TextHeight: CGFloat = expression.boundingRect(with: CGSize(width: text13Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text13FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: text13Rect)
        expression.draw(in: CGRect(x: text13Rect.minX, y: text13Rect.minY + (text13Rect.height - text13TextHeight) / 2, width: text13Rect.width, height: text13TextHeight), withAttributes: text13FontAttributes)
        context.restoreGState()


        //// Text 11 Drawing
        let text11Path = UIBezierPath()
        text11Path.move(to: CGPoint(x: 80.23, y: 49.45))
        text11Path.addLine(to: CGPoint(x: 76.73, y: 52.32))
        text11Path.addLine(to: CGPoint(x: 74.98, y: 50.25))
        text11Path.addLine(to: CGPoint(x: 80.5, y: 45.8))
        text11Path.addLine(to: CGPoint(x: 83.23, y: 45.8))
        text11Path.addLine(to: CGPoint(x: 83.23, y: 63.5))
        text11Path.addLine(to: CGPoint(x: 80.23, y: 63.5))
        text11Path.addLine(to: CGPoint(x: 80.23, y: 49.45))
        text11Path.close()
        text11Path.move(to: CGPoint(x: 92.48, y: 49.45))
        text11Path.addLine(to: CGPoint(x: 88.98, y: 52.32))
        text11Path.addLine(to: CGPoint(x: 87.23, y: 50.25))
        text11Path.addLine(to: CGPoint(x: 92.75, y: 45.8))
        text11Path.addLine(to: CGPoint(x: 95.48, y: 45.8))
        text11Path.addLine(to: CGPoint(x: 95.48, y: 63.5))
        text11Path.addLine(to: CGPoint(x: 92.48, y: 63.5))
        text11Path.addLine(to: CGPoint(x: 92.48, y: 49.45))
        text11Path.close()
        StyleKit_Clock.numbersColor.setFill()
        text11Path.fill()


        //// Text 10 Drawing
        let text10Path = UIBezierPath()
        text10Path.move(to: CGPoint(x: 51.72, y: 80.95))
        text10Path.addLine(to: CGPoint(x: 48.22, y: 83.82))
        text10Path.addLine(to: CGPoint(x: 46.47, y: 81.75))
        text10Path.addLine(to: CGPoint(x: 52, y: 77.3))
        text10Path.addLine(to: CGPoint(x: 54.72, y: 77.3))
        text10Path.addLine(to: CGPoint(x: 54.72, y: 95))
        text10Path.addLine(to: CGPoint(x: 51.72, y: 95))
        text10Path.addLine(to: CGPoint(x: 51.72, y: 80.95))
        text10Path.close()
        text10Path.move(to: CGPoint(x: 70.88, y: 86.15))
        text10Path.addCurve(to: CGPoint(x: 70.46, y: 90.03), controlPoint1: CGPoint(x: 70.88, y: 87.58), controlPoint2: CGPoint(x: 70.74, y: 88.87))
        text10Path.addCurve(to: CGPoint(x: 69.26, y: 92.95), controlPoint1: CGPoint(x: 70.19, y: 91.18), controlPoint2: CGPoint(x: 69.79, y: 92.15))
        text10Path.addCurve(to: CGPoint(x: 67.31, y: 94.8), controlPoint1: CGPoint(x: 68.74, y: 93.75), controlPoint2: CGPoint(x: 68.09, y: 94.37))
        text10Path.addCurve(to: CGPoint(x: 64.65, y: 95.45), controlPoint1: CGPoint(x: 66.54, y: 95.23), controlPoint2: CGPoint(x: 65.65, y: 95.45))
        text10Path.addCurve(to: CGPoint(x: 61.97, y: 94.8), controlPoint1: CGPoint(x: 63.65, y: 95.45), controlPoint2: CGPoint(x: 62.76, y: 95.23))
        text10Path.addCurve(to: CGPoint(x: 60, y: 92.95), controlPoint1: CGPoint(x: 61.19, y: 94.37), controlPoint2: CGPoint(x: 60.53, y: 93.75))
        text10Path.addCurve(to: CGPoint(x: 58.79, y: 90.03), controlPoint1: CGPoint(x: 59.47, y: 92.15), controlPoint2: CGPoint(x: 59.06, y: 91.18))
        text10Path.addCurve(to: CGPoint(x: 58.37, y: 86.15), controlPoint1: CGPoint(x: 58.51, y: 88.87), controlPoint2: CGPoint(x: 58.37, y: 87.58))
        text10Path.addCurve(to: CGPoint(x: 58.79, y: 82.28), controlPoint1: CGPoint(x: 58.37, y: 84.72), controlPoint2: CGPoint(x: 58.51, y: 83.43))
        text10Path.addCurve(to: CGPoint(x: 60, y: 79.35), controlPoint1: CGPoint(x: 59.06, y: 81.12), controlPoint2: CGPoint(x: 59.47, y: 80.15))
        text10Path.addCurve(to: CGPoint(x: 61.97, y: 77.5), controlPoint1: CGPoint(x: 60.53, y: 78.55), controlPoint2: CGPoint(x: 61.19, y: 77.93))
        text10Path.addCurve(to: CGPoint(x: 64.65, y: 76.85), controlPoint1: CGPoint(x: 62.76, y: 77.07), controlPoint2: CGPoint(x: 63.65, y: 76.85))
        text10Path.addCurve(to: CGPoint(x: 67.31, y: 77.5), controlPoint1: CGPoint(x: 65.65, y: 76.85), controlPoint2: CGPoint(x: 66.54, y: 77.07))
        text10Path.addCurve(to: CGPoint(x: 69.26, y: 79.35), controlPoint1: CGPoint(x: 68.09, y: 77.93), controlPoint2: CGPoint(x: 68.74, y: 78.55))
        text10Path.addCurve(to: CGPoint(x: 70.46, y: 82.28), controlPoint1: CGPoint(x: 69.79, y: 80.15), controlPoint2: CGPoint(x: 70.19, y: 81.12))
        text10Path.addCurve(to: CGPoint(x: 70.88, y: 86.15), controlPoint1: CGPoint(x: 70.74, y: 83.43), controlPoint2: CGPoint(x: 70.88, y: 84.72))
        text10Path.close()
        text10Path.move(to: CGPoint(x: 67.8, y: 86.15))
        text10Path.addCurve(to: CGPoint(x: 67.69, y: 84.05), controlPoint1: CGPoint(x: 67.8, y: 85.53), controlPoint2: CGPoint(x: 67.76, y: 84.83))
        text10Path.addCurve(to: CGPoint(x: 67.24, y: 81.82), controlPoint1: CGPoint(x: 67.61, y: 83.27), controlPoint2: CGPoint(x: 67.46, y: 82.53))
        text10Path.addCurve(to: CGPoint(x: 66.28, y: 80.06), controlPoint1: CGPoint(x: 67.01, y: 81.12), controlPoint2: CGPoint(x: 66.69, y: 80.54))
        text10Path.addCurve(to: CGPoint(x: 64.65, y: 79.35), controlPoint1: CGPoint(x: 65.86, y: 79.59), controlPoint2: CGPoint(x: 65.32, y: 79.35))
        text10Path.addCurve(to: CGPoint(x: 63, y: 80.06), controlPoint1: CGPoint(x: 63.97, y: 79.35), controlPoint2: CGPoint(x: 63.42, y: 79.59))
        text10Path.addCurve(to: CGPoint(x: 62.04, y: 81.82), controlPoint1: CGPoint(x: 62.58, y: 80.54), controlPoint2: CGPoint(x: 62.26, y: 81.12))
        text10Path.addCurve(to: CGPoint(x: 61.57, y: 84.05), controlPoint1: CGPoint(x: 61.81, y: 82.53), controlPoint2: CGPoint(x: 61.66, y: 83.27))
        text10Path.addCurve(to: CGPoint(x: 61.45, y: 86.15), controlPoint1: CGPoint(x: 61.49, y: 84.83), controlPoint2: CGPoint(x: 61.45, y: 85.53))
        text10Path.addCurve(to: CGPoint(x: 61.57, y: 88.25), controlPoint1: CGPoint(x: 61.45, y: 86.77), controlPoint2: CGPoint(x: 61.49, y: 87.47))
        text10Path.addCurve(to: CGPoint(x: 62.04, y: 90.45), controlPoint1: CGPoint(x: 61.66, y: 89.03), controlPoint2: CGPoint(x: 61.81, y: 89.77))
        text10Path.addCurve(to: CGPoint(x: 63, y: 92.19), controlPoint1: CGPoint(x: 62.26, y: 91.13), controlPoint2: CGPoint(x: 62.58, y: 91.71))
        text10Path.addCurve(to: CGPoint(x: 64.65, y: 92.9), controlPoint1: CGPoint(x: 63.42, y: 92.66), controlPoint2: CGPoint(x: 63.97, y: 92.9))
        text10Path.addCurve(to: CGPoint(x: 66.28, y: 92.19), controlPoint1: CGPoint(x: 65.32, y: 92.9), controlPoint2: CGPoint(x: 65.86, y: 92.66))
        text10Path.addCurve(to: CGPoint(x: 67.24, y: 90.45), controlPoint1: CGPoint(x: 66.69, y: 91.71), controlPoint2: CGPoint(x: 67.01, y: 91.13))
        text10Path.addCurve(to: CGPoint(x: 67.69, y: 88.25), controlPoint1: CGPoint(x: 67.46, y: 89.77), controlPoint2: CGPoint(x: 67.61, y: 89.03))
        text10Path.addCurve(to: CGPoint(x: 67.8, y: 86.15), controlPoint1: CGPoint(x: 67.76, y: 87.47), controlPoint2: CGPoint(x: 67.8, y: 86.77))
        text10Path.close()
        StyleKit_Clock.numbersColor.setFill()
        text10Path.fill()


        //// Text 9 Drawing
        let text9Rect = CGRect(x: 22, y: 110, width: 38, height: 40)
        let text9TextContent = "9"
        let text9Style = NSMutableParagraphStyle()
        text9Style.alignment = .center
        let text9FontAttributes = [
            .font: UIFont(name: "AvenirNext-DemiBold", size: 25)!,
            .foregroundColor: StyleKit_Clock.numbersColor,
            .paragraphStyle: text9Style,
        ] as [NSAttributedStringKey: Any]

        let text9TextHeight: CGFloat = text9TextContent.boundingRect(with: CGSize(width: text9Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text9FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: text9Rect)
        text9TextContent.draw(in: CGRect(x: text9Rect.minX, y: text9Rect.minY + (text9Rect.height - text9TextHeight) / 2, width: text9Rect.width, height: text9TextHeight), withAttributes: text9FontAttributes)
        context.restoreGState()


        //// Text 8 Drawing
        let text8Rect = CGRect(x: 35, y: 154, width: 38, height: 40)
        let text8TextContent = "8"
        let text8Style = NSMutableParagraphStyle()
        text8Style.alignment = .center
        let text8FontAttributes = [
            .font: UIFont(name: "AvenirNext-DemiBold", size: 25)!,
            .foregroundColor: StyleKit_Clock.numbersColor,
            .paragraphStyle: text8Style,
        ] as [NSAttributedStringKey: Any]

        let text8TextHeight: CGFloat = text8TextContent.boundingRect(with: CGSize(width: text8Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text8FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: text8Rect)
        text8TextContent.draw(in: CGRect(x: text8Rect.minX, y: text8Rect.minY + (text8Rect.height - text8TextHeight) / 2, width: text8Rect.width, height: text8TextHeight), withAttributes: text8FontAttributes)
        context.restoreGState()


        //// Text 7 Drawing
        let text7Rect = CGRect(x: 69.5, y: 187, width: 38, height: 40)
        let text7TextContent = "7"
        let text7Style = NSMutableParagraphStyle()
        text7Style.alignment = .center
        let text7FontAttributes = [
            .font: UIFont(name: "AvenirNext-DemiBold", size: 25)!,
            .foregroundColor: StyleKit_Clock.numbersColor,
            .paragraphStyle: text7Style,
        ] as [NSAttributedStringKey: Any]

        let text7TextHeight: CGFloat = text7TextContent.boundingRect(with: CGSize(width: text7Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text7FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: text7Rect)
        text7TextContent.draw(in: CGRect(x: text7Rect.minX, y: text7Rect.minY + (text7Rect.height - text7TextHeight) / 2, width: text7Rect.width, height: text7TextHeight), withAttributes: text7FontAttributes)
        context.restoreGState()


        //// Text 6 Drawing
        let text6Rect = CGRect(x: 111, y: 198, width: 38, height: 40)
        let text6TextContent = "6"
        let text6Style = NSMutableParagraphStyle()
        text6Style.alignment = .center
        let text6FontAttributes = [
            .font: UIFont(name: "AvenirNext-DemiBold", size: 25)!,
            .foregroundColor: StyleKit_Clock.numbersColor,
            .paragraphStyle: text6Style,
        ] as [NSAttributedStringKey: Any]

        let text6TextHeight: CGFloat = text6TextContent.boundingRect(with: CGSize(width: text6Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text6FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: text6Rect)
        text6TextContent.draw(in: CGRect(x: text6Rect.minX, y: text6Rect.minY + (text6Rect.height - text6TextHeight) / 2, width: text6Rect.width, height: text6TextHeight), withAttributes: text6FontAttributes)
        context.restoreGState()


        //// Text 5 Drawing
        let text5Rect = CGRect(x: 154, y: 187, width: 38, height: 40)
        let text5TextContent = "5"
        let text5Style = NSMutableParagraphStyle()
        text5Style.alignment = .center
        let text5FontAttributes = [
            .font: UIFont(name: "AvenirNext-DemiBold", size: 25)!,
            .foregroundColor: StyleKit_Clock.numbersColor,
            .paragraphStyle: text5Style,
        ] as [NSAttributedStringKey: Any]

        let text5TextHeight: CGFloat = text5TextContent.boundingRect(with: CGSize(width: text5Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text5FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: text5Rect)
        text5TextContent.draw(in: CGRect(x: text5Rect.minX, y: text5Rect.minY + (text5Rect.height - text5TextHeight) / 2, width: text5Rect.width, height: text5TextHeight), withAttributes: text5FontAttributes)
        context.restoreGState()


        //// Text 12 Drawing
        let text12Rect = CGRect(x: 187.5, y: 154, width: 38, height: 40)
        let text12TextContent = "4"
        let text12Style = NSMutableParagraphStyle()
        text12Style.alignment = .center
        let text12FontAttributes = [
            .font: UIFont(name: "AvenirNext-DemiBold", size: 25)!,
            .foregroundColor: StyleKit_Clock.numbersColor,
            .paragraphStyle: text12Style,
        ] as [NSAttributedStringKey: Any]

        let text12TextHeight: CGFloat = text12TextContent.boundingRect(with: CGSize(width: text12Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text12FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: text12Rect)
        text12TextContent.draw(in: CGRect(x: text12Rect.minX, y: text12Rect.minY + (text12Rect.height - text12TextHeight) / 2, width: text12Rect.width, height: text12TextHeight), withAttributes: text12FontAttributes)
        context.restoreGState()


        //// Text 14 Drawing
        let text14Rect = CGRect(x: 201, y: 110, width: 38, height: 40)
        let text14TextContent = "3"
        let text14Style = NSMutableParagraphStyle()
        text14Style.alignment = .center
        let text14FontAttributes = [
            .font: UIFont(name: "AvenirNext-DemiBold", size: 25)!,
            .foregroundColor: StyleKit_Clock.numbersColor,
            .paragraphStyle: text14Style,
        ] as [NSAttributedStringKey: Any]

        let text14TextHeight: CGFloat = text14TextContent.boundingRect(with: CGSize(width: text14Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text14FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: text14Rect)
        text14TextContent.draw(in: CGRect(x: text14Rect.minX, y: text14Rect.minY + (text14Rect.height - text14TextHeight) / 2, width: text14Rect.width, height: text14TextHeight), withAttributes: text14FontAttributes)
        context.restoreGState()


        //// Text 15 Drawing
        let text15Rect = CGRect(x: 187, y: 66, width: 38, height: 40)
        let text15TextContent = "2"
        let text15Style = NSMutableParagraphStyle()
        text15Style.alignment = .center
        let text15FontAttributes = [
            .font: UIFont(name: "AvenirNext-DemiBold", size: 25)!,
            .foregroundColor: StyleKit_Clock.numbersColor,
            .paragraphStyle: text15Style,
        ] as [NSAttributedStringKey: Any]

        let text15TextHeight: CGFloat = text15TextContent.boundingRect(with: CGSize(width: text15Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text15FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: text15Rect)
        text15TextContent.draw(in: CGRect(x: text15Rect.minX, y: text15Rect.minY + (text15Rect.height - text15TextHeight) / 2, width: text15Rect.width, height: text15TextHeight), withAttributes: text15FontAttributes)
        context.restoreGState()


        //// Text 1 Drawing
        let text1Rect = CGRect(x: 154, y: 35.5, width: 38, height: 40)
        let text1TextContent = "1"
        let text1Style = NSMutableParagraphStyle()
        text1Style.alignment = .center
        let text1FontAttributes = [
            .font: UIFont(name: "AvenirNext-DemiBold", size: 25)!,
            .foregroundColor: StyleKit_Clock.numbersColor,
            .paragraphStyle: text1Style,
        ] as [NSAttributedStringKey: Any]

        let text1TextHeight: CGFloat = text1TextContent.boundingRect(with: CGSize(width: text1Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text1FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: text1Rect)
        text1TextContent.draw(in: CGRect(x: text1Rect.minX, y: text1Rect.minY + (text1Rect.height - text1TextHeight) / 2, width: text1Rect.width, height: text1TextHeight), withAttributes: text1FontAttributes)
        context.restoreGState()


        //// Text 16 Drawing
        let text16Path = UIBezierPath()
        text16Path.move(to: CGPoint(x: 123.73, y: 38.95))
        text16Path.addLine(to: CGPoint(x: 120.23, y: 41.82))
        text16Path.addLine(to: CGPoint(x: 118.48, y: 39.75))
        text16Path.addLine(to: CGPoint(x: 124, y: 35.3))
        text16Path.addLine(to: CGPoint(x: 126.73, y: 35.3))
        text16Path.addLine(to: CGPoint(x: 126.73, y: 53))
        text16Path.addLine(to: CGPoint(x: 123.73, y: 53))
        text16Path.addLine(to: CGPoint(x: 123.73, y: 38.95))
        text16Path.close()
        text16Path.move(to: CGPoint(x: 130.73, y: 50.25))
        text16Path.addLine(to: CGPoint(x: 137.55, y: 43.55))
        text16Path.addCurve(to: CGPoint(x: 138.86, y: 41.94), controlPoint1: CGPoint(x: 138.1, y: 43.02), controlPoint2: CGPoint(x: 138.54, y: 42.48))
        text16Path.addCurve(to: CGPoint(x: 139.35, y: 40.07), controlPoint1: CGPoint(x: 139.19, y: 41.4), controlPoint2: CGPoint(x: 139.35, y: 40.78))
        text16Path.addCurve(to: CGPoint(x: 138.54, y: 38.09), controlPoint1: CGPoint(x: 139.35, y: 39.24), controlPoint2: CGPoint(x: 139.08, y: 38.58))
        text16Path.addCurve(to: CGPoint(x: 136.53, y: 37.35), controlPoint1: CGPoint(x: 138, y: 37.6), controlPoint2: CGPoint(x: 137.33, y: 37.35))
        text16Path.addCurve(to: CGPoint(x: 134.48, y: 38.21), controlPoint1: CGPoint(x: 135.67, y: 37.35), controlPoint2: CGPoint(x: 134.99, y: 37.64))
        text16Path.addCurve(to: CGPoint(x: 133.53, y: 40.38), controlPoint1: CGPoint(x: 133.96, y: 38.79), controlPoint2: CGPoint(x: 133.64, y: 39.51))
        text16Path.addLine(to: CGPoint(x: 130.6, y: 39.93))
        text16Path.addCurve(to: CGPoint(x: 131.23, y: 37.9), controlPoint1: CGPoint(x: 130.68, y: 39.19), controlPoint2: CGPoint(x: 130.89, y: 38.52))
        text16Path.addCurve(to: CGPoint(x: 132.5, y: 36.3), controlPoint1: CGPoint(x: 131.56, y: 37.28), controlPoint2: CGPoint(x: 131.98, y: 36.75))
        text16Path.addCurve(to: CGPoint(x: 134.31, y: 35.24), controlPoint1: CGPoint(x: 133.02, y: 35.85), controlPoint2: CGPoint(x: 133.62, y: 35.5))
        text16Path.addCurve(to: CGPoint(x: 136.58, y: 34.85), controlPoint1: CGPoint(x: 135, y: 34.98), controlPoint2: CGPoint(x: 135.76, y: 34.85))
        text16Path.addCurve(to: CGPoint(x: 138.79, y: 35.18), controlPoint1: CGPoint(x: 137.34, y: 34.85), controlPoint2: CGPoint(x: 138.08, y: 34.96))
        text16Path.addCurve(to: CGPoint(x: 140.68, y: 36.16), controlPoint1: CGPoint(x: 139.5, y: 35.39), controlPoint2: CGPoint(x: 140.12, y: 35.72))
        text16Path.addCurve(to: CGPoint(x: 141.99, y: 37.79), controlPoint1: CGPoint(x: 141.23, y: 36.6), controlPoint2: CGPoint(x: 141.66, y: 37.15))
        text16Path.addCurve(to: CGPoint(x: 142.48, y: 40.03), controlPoint1: CGPoint(x: 142.31, y: 38.43), controlPoint2: CGPoint(x: 142.48, y: 39.17))
        text16Path.addCurve(to: CGPoint(x: 142.25, y: 41.61), controlPoint1: CGPoint(x: 142.48, y: 40.59), controlPoint2: CGPoint(x: 142.4, y: 41.12))
        text16Path.addCurve(to: CGPoint(x: 141.64, y: 43), controlPoint1: CGPoint(x: 142.1, y: 42.1), controlPoint2: CGPoint(x: 141.9, y: 42.57))
        text16Path.addCurve(to: CGPoint(x: 140.74, y: 44.24), controlPoint1: CGPoint(x: 141.38, y: 43.43), controlPoint2: CGPoint(x: 141.08, y: 43.85))
        text16Path.addCurve(to: CGPoint(x: 139.63, y: 45.38), controlPoint1: CGPoint(x: 140.4, y: 44.63), controlPoint2: CGPoint(x: 140.03, y: 45.01))
        text16Path.addLine(to: CGPoint(x: 134.53, y: 50.25))
        text16Path.addLine(to: CGPoint(x: 142.5, y: 50.25))
        text16Path.addLine(to: CGPoint(x: 142.5, y: 53))
        text16Path.addLine(to: CGPoint(x: 130.73, y: 53))
        text16Path.addLine(to: CGPoint(x: 130.73, y: 50.25))
        text16Path.close()
        StyleKit_Clock.numbersColor.setFill()
        text16Path.fill()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawClockPlayground() {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!

        //// Symbol Drawing
        let symbolRect = CGRect(x: 90, y: 30, width: 258, height: 258)
        context.saveGState()
        context.clip(to: symbolRect)
        context.translateBy(x: symbolRect.minX, y: symbolRect.minY)

        StyleKit_Clock.drawClock(frame: CGRect(origin: .zero, size: symbolRect.size), resizing: .stretch, hours: 3, minutes: 42, seconds: 23)
        context.restoreGState()


        //// Symbol 2 Drawing
        let symbol2Rect = CGRect(x: 348, y: 33, width: 253, height: 253)
        context.saveGState()
        context.clip(to: symbol2Rect)
        context.translateBy(x: symbol2Rect.minX, y: symbol2Rect.minY)

        StyleKit_Clock.drawClock(frame: CGRect(origin: .zero, size: symbol2Rect.size), resizing: .stretch, hours: 3, minutes: 42, seconds: 23)
        context.restoreGState()


        //// Symbol 3 Drawing
        let symbol3Rect = CGRect(x: 601, y: 30, width: 260, height: 260)
        context.saveGState()
        context.clip(to: symbol3Rect)
        context.translateBy(x: symbol3Rect.minX, y: symbol3Rect.minY)

        StyleKit_Clock.drawClock(frame: CGRect(origin: .zero, size: symbol3Rect.size), resizing: .stretch, hours: 3, minutes: 42, seconds: 23)
        context.restoreGState()
    }




    @objc(StyleKit_ClockResizingBehavior)
    public enum ResizingBehavior: Int {
        case aspectFit /// The content is proportionally resized to fit into the target rectangle.
        case aspectFill /// The content is proportionally resized to completely fill the target rectangle.
        case stretch /// The content is stretched to match the entire target rectangle.
        case center /// The content is centered in the target rectangle, but it is NOT resized.

        public func apply(rect: CGRect, target: CGRect) -> CGRect {
            if rect == target || target == CGRect.zero {
                return rect
            }

            var scales = CGSize.zero
            scales.width = abs(target.width / rect.width)
            scales.height = abs(target.height / rect.height)

            switch self {
                case .aspectFit:
                    scales.width = min(scales.width, scales.height)
                    scales.height = scales.width
                case .aspectFill:
                    scales.width = max(scales.width, scales.height)
                    scales.height = scales.width
                case .stretch:
                    break
                case .center:
                    scales.width = 1
                    scales.height = 1
            }

            var result = rect.standardized
            result.size.width *= scales.width
            result.size.height *= scales.height
            result.origin.x = target.minX + (target.width - result.width) / 2
            result.origin.y = target.minY + (target.height - result.height) / 2
            return result
        }
    }
}



private extension UIColor {
    func blended(withFraction fraction: CGFloat, of color: UIColor) -> UIColor {
        var r1: CGFloat = 1, g1: CGFloat = 1, b1: CGFloat = 1, a1: CGFloat = 1
        var r2: CGFloat = 1, g2: CGFloat = 1, b2: CGFloat = 1, a2: CGFloat = 1

        self.getRed(&r1, green: &g1, blue: &b1, alpha: &a1)
        color.getRed(&r2, green: &g2, blue: &b2, alpha: &a2)

        return UIColor(red: r1 * (1 - fraction) + r2 * fraction,
            green: g1 * (1 - fraction) + g2 * fraction,
            blue: b1 * (1 - fraction) + b2 * fraction,
            alpha: a1 * (1 - fraction) + a2 * fraction);
    }
}
