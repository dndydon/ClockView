//
//  StyleKit_Clock.swift
//  Clock
//
//  Created by Don Sleeter on 1/26/18.
//  Copyright Â© 2018 Stone Canyon. All rights reserved.
//
//  Generated by PaintCode
//  http://www.paintcodeapp.com
//



import UIKit

public class StyleKit_Clock : NSObject {

    //// Cache

    private struct Cache {
        static let silverGradientColor: UIColor = UIColor(red: 0.928, green: 0.928, blue: 0.928, alpha: 1.000)
        static let tickColor: UIColor = UIColor(red: 0.638, green: 0.638, blue: 0.638, alpha: 1.000)
        static let lightHandColor: UIColor = UIColor(red: 0.941, green: 0.232, blue: 0.232, alpha: 0.827)
        static let faceColor: UIColor = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1.000)
        static let numbersColor: UIColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)
        static let darkHandsColor: UIColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)
        static let rimColor: UIColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)
    }

    //// Colors

    @objc dynamic public class var silverGradientColor: UIColor { return Cache.silverGradientColor }
    @objc dynamic public class var tickColor: UIColor { return Cache.tickColor }
    @objc dynamic public class var lightHandColor: UIColor { return Cache.lightHandColor }
    @objc dynamic public class var faceColor: UIColor { return Cache.faceColor }
    @objc dynamic public class var numbersColor: UIColor { return Cache.numbersColor }
    @objc dynamic public class var darkHandsColor: UIColor { return Cache.darkHandsColor }
    @objc dynamic public class var rimColor: UIColor { return Cache.rimColor }

    //// Drawing Methods

    @objc dynamic public class func drawClock(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 232, height: 232), resizing: ResizingBehavior = .aspectFit, hours: CGFloat = 3, minutes: CGFloat = 42, seconds: CGFloat = 24, scale: CGFloat = 0.925) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 232, height: 232), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 232, y: resizedFrame.height / 232)


        //// Color Declarations
        let silverGradientColor2 = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1.000)

        //// Gradient Declarations
        let silverGradient = CGGradient(colorsSpace: nil, colors: [StyleKit_Clock.faceColor.cgColor, StyleKit_Clock.faceColor.blended(withFraction: 0.5, of: silverGradientColor2).cgColor, silverGradientColor2.cgColor, silverGradientColor2.blended(withFraction: 0.5, of: StyleKit_Clock.silverGradientColor).cgColor, StyleKit_Clock.silverGradientColor.cgColor] as CFArray, locations: [0, 0.68, 0.74, 0.92, 0.99])!

        //// Variable Declarations
        let expression = hours > 12 ? "PM" : "AM"
        let secondsAngle: CGFloat = -seconds / 60.0 * 360
        let minuteAngle: CGFloat = -(minutes / 60.0 * 360 - secondsAngle / 60.0)
        let hourAngle: CGFloat = -hours / 12.0 * 360 + minuteAngle / 12.0

        //// clockSymbol
        context.saveGState()
        context.translateBy(x: 116, y: 116)
        context.scaleBy(x: scale, y: scale)



        //// ClockRim Drawing
        context.saveGState()

        let clockRimPath = UIBezierPath(ovalIn: CGRect(x: -116, y: -116, width: 232, height: 232))
        StyleKit_Clock.rimColor.setFill()
        clockRimPath.fill()

        context.restoreGState()


        //// ClockFace Drawing
        context.saveGState()

        let clockFacePath = UIBezierPath(ovalIn: CGRect(x: -110, y: -110, width: 220, height: 220))
        context.saveGState()
        clockFacePath.addClip()
        context.drawRadialGradient(silverGradient,
            startCenter: CGPoint(x: 0, y: 0), startRadius: 23.66,
            endCenter: CGPoint(x: 0, y: 0), endRadius: 109.8,
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()

        context.restoreGState()


        //// MinuteHand Drawing
        context.saveGState()
        context.rotate(by: -(minuteAngle + 90) * CGFloat.pi/180)

        let minuteHandPath = UIBezierPath()
        minuteHandPath.move(to: CGPoint(x: 7.07, y: -7.07))
        minuteHandPath.addCurve(to: CGPoint(x: 9.54, y: -3), controlPoint1: CGPoint(x: 8.25, y: -5.89), controlPoint2: CGPoint(x: 9.07, y: -4.49))
        minuteHandPath.addLine(to: CGPoint(x: 95, y: -3))
        minuteHandPath.addLine(to: CGPoint(x: 95, y: 3))
        minuteHandPath.addLine(to: CGPoint(x: 9.54, y: 3))
        minuteHandPath.addCurve(to: CGPoint(x: 7.07, y: 7.07), controlPoint1: CGPoint(x: 9.07, y: 4.49), controlPoint2: CGPoint(x: 8.25, y: 5.89))
        minuteHandPath.addCurve(to: CGPoint(x: -7.07, y: 7.07), controlPoint1: CGPoint(x: 3.17, y: 10.98), controlPoint2: CGPoint(x: -3.17, y: 10.98))
        minuteHandPath.addCurve(to: CGPoint(x: -7.07, y: -7.07), controlPoint1: CGPoint(x: -10.98, y: 3.17), controlPoint2: CGPoint(x: -10.98, y: -3.17))
        minuteHandPath.addCurve(to: CGPoint(x: 7.07, y: -7.07), controlPoint1: CGPoint(x: -3.17, y: -10.98), controlPoint2: CGPoint(x: 3.17, y: -10.98))
        minuteHandPath.close()
        StyleKit_Clock.darkHandsColor.setFill()
        minuteHandPath.fill()

        context.restoreGState()


        //// HourHand Drawing
        context.saveGState()
        context.rotate(by: -(hourAngle + 90) * CGFloat.pi/180)

        let hourHandPath = UIBezierPath()
        hourHandPath.move(to: CGPoint(x: 7.07, y: -7.07))
        hourHandPath.addCurve(to: CGPoint(x: 8.66, y: -5), controlPoint1: CGPoint(x: 7.7, y: -6.44), controlPoint2: CGPoint(x: 8.24, y: -5.74))
        hourHandPath.addLine(to: CGPoint(x: 56, y: -5))
        hourHandPath.addLine(to: CGPoint(x: 56, y: 5))
        hourHandPath.addLine(to: CGPoint(x: 8.66, y: 5))
        hourHandPath.addCurve(to: CGPoint(x: 7.07, y: 7.07), controlPoint1: CGPoint(x: 8.24, y: 5.74), controlPoint2: CGPoint(x: 7.7, y: 6.44))
        hourHandPath.addCurve(to: CGPoint(x: -7.07, y: 7.07), controlPoint1: CGPoint(x: 3.17, y: 10.98), controlPoint2: CGPoint(x: -3.17, y: 10.98))
        hourHandPath.addCurve(to: CGPoint(x: -7.07, y: -7.07), controlPoint1: CGPoint(x: -10.98, y: 3.17), controlPoint2: CGPoint(x: -10.98, y: -3.17))
        hourHandPath.addCurve(to: CGPoint(x: 7.07, y: -7.07), controlPoint1: CGPoint(x: -3.17, y: -10.98), controlPoint2: CGPoint(x: 3.17, y: -10.98))
        hourHandPath.close()
        StyleKit_Clock.darkHandsColor.setFill()
        hourHandPath.fill()

        context.restoreGState()


        //// SecondHand Drawing
        context.saveGState()
        context.rotate(by: -(secondsAngle + 90) * CGFloat.pi/180)

        let secondHandPath = UIBezierPath()
        secondHandPath.move(to: CGPoint(x: 4.24, y: -4.24))
        secondHandPath.addCurve(to: CGPoint(x: 5.92, y: -1), controlPoint1: CGPoint(x: 5.16, y: -3.33), controlPoint2: CGPoint(x: 5.72, y: -2.19))
        secondHandPath.addLine(to: CGPoint(x: 99, y: -1))
        secondHandPath.addLine(to: CGPoint(x: 99, y: 1))
        secondHandPath.addLine(to: CGPoint(x: 5.92, y: 1))
        secondHandPath.addCurve(to: CGPoint(x: 4.24, y: 4.24), controlPoint1: CGPoint(x: 5.72, y: 2.19), controlPoint2: CGPoint(x: 5.16, y: 3.33))
        secondHandPath.addCurve(to: CGPoint(x: -4.24, y: 4.24), controlPoint1: CGPoint(x: 1.9, y: 6.59), controlPoint2: CGPoint(x: -1.9, y: 6.59))
        secondHandPath.addCurve(to: CGPoint(x: -4.24, y: -4.24), controlPoint1: CGPoint(x: -6.59, y: 1.9), controlPoint2: CGPoint(x: -6.59, y: -1.9))
        secondHandPath.addCurve(to: CGPoint(x: 4.24, y: -4.24), controlPoint1: CGPoint(x: -1.9, y: -6.59), controlPoint2: CGPoint(x: 1.9, y: -6.59))
        secondHandPath.close()
        StyleKit_Clock.lightHandColor.setFill()
        secondHandPath.fill()

        context.restoreGState()


        //// Group 6-12
        //// Mark12 Drawing
        let mark12Path = UIBezierPath(rect: CGRect(x: -3, y: -110, width: 6, height: 8))
        StyleKit_Clock.tickColor.setFill()
        mark12Path.fill()


        //// Mark6 Drawing
        let mark6Path = UIBezierPath(rect: CGRect(x: -3, y: 102, width: 6, height: 8))
        StyleKit_Clock.tickColor.setFill()
        mark6Path.fill()




        //// Group 9-3
        context.saveGState()
        context.rotate(by: 90 * CGFloat.pi/180)



        //// Mark3 Drawing
        let mark3Path = UIBezierPath(rect: CGRect(x: -3, y: -110, width: 6, height: 8))
        StyleKit_Clock.tickColor.setFill()
        mark3Path.fill()


        //// Mark9 Drawing
        let mark9Path = UIBezierPath(rect: CGRect(x: -3, y: 102, width: 6, height: 8))
        StyleKit_Clock.tickColor.setFill()
        mark9Path.fill()



        context.restoreGState()


        //// Group 5-11
        context.saveGState()
        context.rotate(by: -30 * CGFloat.pi/180)



        //// Mark11 Drawing
        let mark11Path = UIBezierPath(rect: CGRect(x: -3, y: -110, width: 6, height: 8))
        StyleKit_Clock.tickColor.setFill()
        mark11Path.fill()


        //// Mark5 Drawing
        let mark5Path = UIBezierPath(rect: CGRect(x: -3, y: 102, width: 6, height: 8))
        StyleKit_Clock.tickColor.setFill()
        mark5Path.fill()



        context.restoreGState()


        //// Group 4-10
        context.saveGState()
        context.rotate(by: -60 * CGFloat.pi/180)



        //// Mark10 Drawing
        let mark10Path = UIBezierPath(rect: CGRect(x: -3, y: -110, width: 6, height: 8))
        StyleKit_Clock.tickColor.setFill()
        mark10Path.fill()


        //// Mark4 Drawing
        let mark4Path = UIBezierPath(rect: CGRect(x: -3, y: 102, width: 6, height: 8))
        StyleKit_Clock.tickColor.setFill()
        mark4Path.fill()



        context.restoreGState()


        //// Group 2-8
        context.saveGState()
        context.rotate(by: -120 * CGFloat.pi/180)



        //// Mark8 Drawing
        let mark8Path = UIBezierPath(rect: CGRect(x: -3, y: -110, width: 6, height: 8))
        StyleKit_Clock.tickColor.setFill()
        mark8Path.fill()


        //// Mark2 Drawing
        let mark2Path = UIBezierPath(rect: CGRect(x: -3, y: 102, width: 6, height: 8))
        StyleKit_Clock.tickColor.setFill()
        mark2Path.fill()



        context.restoreGState()


        //// Group 1-7
        context.saveGState()
        context.rotate(by: -150 * CGFloat.pi/180)



        //// Mark7 Drawing
        let mark7Path = UIBezierPath(rect: CGRect(x: -3, y: -110, width: 6, height: 8))
        StyleKit_Clock.tickColor.setFill()
        mark7Path.fill()


        //// Mark1 Drawing
        let mark1Path = UIBezierPath(rect: CGRect(x: -3, y: 102, width: 6, height: 8))
        StyleKit_Clock.tickColor.setFill()
        mark1Path.fill()



        context.restoreGState()


        //// Text AM/PM Drawing
        let textAMPMRect = CGRect(x: -31, y: 14, width: 62, height: 34)
        let textAMPMStyle = NSMutableParagraphStyle()
        textAMPMStyle.alignment = .center
        let textAMPMFontAttributes = [
            .font: UIFont(name: "AvenirNext-DemiBold", size: 20)!,
            .foregroundColor: StyleKit_Clock.numbersColor,
            .paragraphStyle: textAMPMStyle,
        ] as [NSAttributedStringKey: Any]

        let textAMPMTextHeight: CGFloat = expression.boundingRect(with: CGSize(width: textAMPMRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: textAMPMFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: textAMPMRect)
        expression.draw(in: CGRect(x: textAMPMRect.minX, y: textAMPMRect.minY + (textAMPMRect.height - textAMPMTextHeight) / 2, width: textAMPMRect.width, height: textAMPMTextHeight), withAttributes: textAMPMFontAttributes)
        context.restoreGState()


        //// 11Text Drawing
        let _11TextPath = UIBezierPath()
        _11TextPath.move(to: CGPoint(x: -49.77, y: -80.55))
        _11TextPath.addLine(to: CGPoint(x: -53.27, y: -77.68))
        _11TextPath.addLine(to: CGPoint(x: -55.02, y: -79.75))
        _11TextPath.addLine(to: CGPoint(x: -49.5, y: -84.2))
        _11TextPath.addLine(to: CGPoint(x: -46.77, y: -84.2))
        _11TextPath.addLine(to: CGPoint(x: -46.77, y: -66.5))
        _11TextPath.addLine(to: CGPoint(x: -49.77, y: -66.5))
        _11TextPath.addLine(to: CGPoint(x: -49.77, y: -80.55))
        _11TextPath.close()
        _11TextPath.move(to: CGPoint(x: -37.52, y: -80.55))
        _11TextPath.addLine(to: CGPoint(x: -41.02, y: -77.68))
        _11TextPath.addLine(to: CGPoint(x: -42.77, y: -79.75))
        _11TextPath.addLine(to: CGPoint(x: -37.25, y: -84.2))
        _11TextPath.addLine(to: CGPoint(x: -34.52, y: -84.2))
        _11TextPath.addLine(to: CGPoint(x: -34.52, y: -66.5))
        _11TextPath.addLine(to: CGPoint(x: -37.52, y: -66.5))
        _11TextPath.addLine(to: CGPoint(x: -37.52, y: -80.55))
        _11TextPath.close()
        StyleKit_Clock.numbersColor.setFill()
        _11TextPath.fill()


        //// 10Text Drawing
        let _10TextPath = UIBezierPath()
        _10TextPath.move(to: CGPoint(x: -78.28, y: -49.05))
        _10TextPath.addLine(to: CGPoint(x: -81.78, y: -46.18))
        _10TextPath.addLine(to: CGPoint(x: -83.53, y: -48.25))
        _10TextPath.addLine(to: CGPoint(x: -78, y: -52.7))
        _10TextPath.addLine(to: CGPoint(x: -75.28, y: -52.7))
        _10TextPath.addLine(to: CGPoint(x: -75.28, y: -35))
        _10TextPath.addLine(to: CGPoint(x: -78.28, y: -35))
        _10TextPath.addLine(to: CGPoint(x: -78.28, y: -49.05))
        _10TextPath.close()
        _10TextPath.move(to: CGPoint(x: -59.13, y: -43.85))
        _10TextPath.addCurve(to: CGPoint(x: -59.54, y: -39.97), controlPoint1: CGPoint(x: -59.13, y: -42.42), controlPoint2: CGPoint(x: -59.26, y: -41.13))
        _10TextPath.addCurve(to: CGPoint(x: -60.74, y: -37.05), controlPoint1: CGPoint(x: -59.81, y: -38.82), controlPoint2: CGPoint(x: -60.21, y: -37.85))
        _10TextPath.addCurve(to: CGPoint(x: -62.69, y: -35.2), controlPoint1: CGPoint(x: -61.26, y: -36.25), controlPoint2: CGPoint(x: -61.91, y: -35.63))
        _10TextPath.addCurve(to: CGPoint(x: -65.35, y: -34.55), controlPoint1: CGPoint(x: -63.46, y: -34.77), controlPoint2: CGPoint(x: -64.35, y: -34.55))
        _10TextPath.addCurve(to: CGPoint(x: -68.03, y: -35.2), controlPoint1: CGPoint(x: -66.35, y: -34.55), controlPoint2: CGPoint(x: -67.24, y: -34.77))
        _10TextPath.addCurve(to: CGPoint(x: -70, y: -37.05), controlPoint1: CGPoint(x: -68.81, y: -35.63), controlPoint2: CGPoint(x: -69.47, y: -36.25))
        _10TextPath.addCurve(to: CGPoint(x: -71.21, y: -39.97), controlPoint1: CGPoint(x: -70.53, y: -37.85), controlPoint2: CGPoint(x: -70.94, y: -38.82))
        _10TextPath.addCurve(to: CGPoint(x: -71.62, y: -43.85), controlPoint1: CGPoint(x: -71.49, y: -41.13), controlPoint2: CGPoint(x: -71.62, y: -42.42))
        _10TextPath.addCurve(to: CGPoint(x: -71.21, y: -47.72), controlPoint1: CGPoint(x: -71.62, y: -45.28), controlPoint2: CGPoint(x: -71.49, y: -46.57))
        _10TextPath.addCurve(to: CGPoint(x: -70, y: -50.65), controlPoint1: CGPoint(x: -70.94, y: -48.88), controlPoint2: CGPoint(x: -70.53, y: -49.85))
        _10TextPath.addCurve(to: CGPoint(x: -68.03, y: -52.5), controlPoint1: CGPoint(x: -69.47, y: -51.45), controlPoint2: CGPoint(x: -68.81, y: -52.07))
        _10TextPath.addCurve(to: CGPoint(x: -65.35, y: -53.15), controlPoint1: CGPoint(x: -67.24, y: -52.93), controlPoint2: CGPoint(x: -66.35, y: -53.15))
        _10TextPath.addCurve(to: CGPoint(x: -62.69, y: -52.5), controlPoint1: CGPoint(x: -64.35, y: -53.15), controlPoint2: CGPoint(x: -63.46, y: -52.93))
        _10TextPath.addCurve(to: CGPoint(x: -60.74, y: -50.65), controlPoint1: CGPoint(x: -61.91, y: -52.07), controlPoint2: CGPoint(x: -61.26, y: -51.45))
        _10TextPath.addCurve(to: CGPoint(x: -59.54, y: -47.72), controlPoint1: CGPoint(x: -60.21, y: -49.85), controlPoint2: CGPoint(x: -59.81, y: -48.88))
        _10TextPath.addCurve(to: CGPoint(x: -59.13, y: -43.85), controlPoint1: CGPoint(x: -59.26, y: -46.57), controlPoint2: CGPoint(x: -59.13, y: -45.28))
        _10TextPath.close()
        _10TextPath.move(to: CGPoint(x: -62.2, y: -43.85))
        _10TextPath.addCurve(to: CGPoint(x: -62.31, y: -45.95), controlPoint1: CGPoint(x: -62.2, y: -44.47), controlPoint2: CGPoint(x: -62.24, y: -45.17))
        _10TextPath.addCurve(to: CGPoint(x: -62.76, y: -48.18), controlPoint1: CGPoint(x: -62.39, y: -46.73), controlPoint2: CGPoint(x: -62.54, y: -47.47))
        _10TextPath.addCurve(to: CGPoint(x: -63.73, y: -49.94), controlPoint1: CGPoint(x: -62.99, y: -48.88), controlPoint2: CGPoint(x: -63.31, y: -49.46))
        _10TextPath.addCurve(to: CGPoint(x: -65.35, y: -50.65), controlPoint1: CGPoint(x: -64.14, y: -50.41), controlPoint2: CGPoint(x: -64.68, y: -50.65))
        _10TextPath.addCurve(to: CGPoint(x: -67, y: -49.94), controlPoint1: CGPoint(x: -66.03, y: -50.65), controlPoint2: CGPoint(x: -66.58, y: -50.41))
        _10TextPath.addCurve(to: CGPoint(x: -67.96, y: -48.18), controlPoint1: CGPoint(x: -67.42, y: -49.46), controlPoint2: CGPoint(x: -67.74, y: -48.88))
        _10TextPath.addCurve(to: CGPoint(x: -68.43, y: -45.95), controlPoint1: CGPoint(x: -68.19, y: -47.47), controlPoint2: CGPoint(x: -68.34, y: -46.73))
        _10TextPath.addCurve(to: CGPoint(x: -68.55, y: -43.85), controlPoint1: CGPoint(x: -68.51, y: -45.17), controlPoint2: CGPoint(x: -68.55, y: -44.47))
        _10TextPath.addCurve(to: CGPoint(x: -68.43, y: -41.75), controlPoint1: CGPoint(x: -68.55, y: -43.23), controlPoint2: CGPoint(x: -68.51, y: -42.53))
        _10TextPath.addCurve(to: CGPoint(x: -67.96, y: -39.55), controlPoint1: CGPoint(x: -68.34, y: -40.97), controlPoint2: CGPoint(x: -68.19, y: -40.23))
        _10TextPath.addCurve(to: CGPoint(x: -67, y: -37.81), controlPoint1: CGPoint(x: -67.74, y: -38.87), controlPoint2: CGPoint(x: -67.42, y: -38.29))
        _10TextPath.addCurve(to: CGPoint(x: -65.35, y: -37.1), controlPoint1: CGPoint(x: -66.58, y: -37.34), controlPoint2: CGPoint(x: -66.03, y: -37.1))
        _10TextPath.addCurve(to: CGPoint(x: -63.73, y: -37.81), controlPoint1: CGPoint(x: -64.68, y: -37.1), controlPoint2: CGPoint(x: -64.14, y: -37.34))
        _10TextPath.addCurve(to: CGPoint(x: -62.76, y: -39.55), controlPoint1: CGPoint(x: -63.31, y: -38.29), controlPoint2: CGPoint(x: -62.99, y: -38.87))
        _10TextPath.addCurve(to: CGPoint(x: -62.31, y: -41.75), controlPoint1: CGPoint(x: -62.54, y: -40.23), controlPoint2: CGPoint(x: -62.39, y: -40.97))
        _10TextPath.addCurve(to: CGPoint(x: -62.2, y: -43.85), controlPoint1: CGPoint(x: -62.24, y: -42.53), controlPoint2: CGPoint(x: -62.2, y: -43.23))
        _10TextPath.close()
        StyleKit_Clock.numbersColor.setFill()
        _10TextPath.fill()


        //// 9Text Drawing
        let _9TextRect = CGRect(x: -108, y: -20, width: 38, height: 40)
        let _9TextTextContent = "9"
        let _9TextStyle = NSMutableParagraphStyle()
        _9TextStyle.alignment = .center
        let _9TextFontAttributes = [
            .font: UIFont(name: "AvenirNext-DemiBold", size: 25)!,
            .foregroundColor: StyleKit_Clock.numbersColor,
            .paragraphStyle: _9TextStyle,
        ] as [NSAttributedStringKey: Any]

        let _9TextTextHeight: CGFloat = _9TextTextContent.boundingRect(with: CGSize(width: _9TextRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: _9TextFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: _9TextRect)
        _9TextTextContent.draw(in: CGRect(x: _9TextRect.minX, y: _9TextRect.minY + (_9TextRect.height - _9TextTextHeight) / 2, width: _9TextRect.width, height: _9TextTextHeight), withAttributes: _9TextFontAttributes)
        context.restoreGState()


        //// 8Text Drawing
        let _8TextRect = CGRect(x: -95, y: 24, width: 38, height: 40)
        let _8TextTextContent = "8"
        let _8TextStyle = NSMutableParagraphStyle()
        _8TextStyle.alignment = .center
        let _8TextFontAttributes = [
            .font: UIFont(name: "AvenirNext-DemiBold", size: 25)!,
            .foregroundColor: StyleKit_Clock.numbersColor,
            .paragraphStyle: _8TextStyle,
        ] as [NSAttributedStringKey: Any]

        let _8TextTextHeight: CGFloat = _8TextTextContent.boundingRect(with: CGSize(width: _8TextRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: _8TextFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: _8TextRect)
        _8TextTextContent.draw(in: CGRect(x: _8TextRect.minX, y: _8TextRect.minY + (_8TextRect.height - _8TextTextHeight) / 2, width: _8TextRect.width, height: _8TextTextHeight), withAttributes: _8TextFontAttributes)
        context.restoreGState()


        //// 7Text Drawing
        let _7TextRect = CGRect(x: -60.5, y: 57, width: 38, height: 40)
        let _7TextTextContent = "7"
        let _7TextStyle = NSMutableParagraphStyle()
        _7TextStyle.alignment = .center
        let _7TextFontAttributes = [
            .font: UIFont(name: "AvenirNext-DemiBold", size: 25)!,
            .foregroundColor: StyleKit_Clock.numbersColor,
            .paragraphStyle: _7TextStyle,
        ] as [NSAttributedStringKey: Any]

        let _7TextTextHeight: CGFloat = _7TextTextContent.boundingRect(with: CGSize(width: _7TextRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: _7TextFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: _7TextRect)
        _7TextTextContent.draw(in: CGRect(x: _7TextRect.minX, y: _7TextRect.minY + (_7TextRect.height - _7TextTextHeight) / 2, width: _7TextRect.width, height: _7TextTextHeight), withAttributes: _7TextFontAttributes)
        context.restoreGState()


        //// 6Text Drawing
        let _6TextRect = CGRect(x: -19, y: 68, width: 38, height: 40)
        let _6TextTextContent = "6"
        let _6TextStyle = NSMutableParagraphStyle()
        _6TextStyle.alignment = .center
        let _6TextFontAttributes = [
            .font: UIFont(name: "AvenirNext-DemiBold", size: 25)!,
            .foregroundColor: StyleKit_Clock.numbersColor,
            .paragraphStyle: _6TextStyle,
        ] as [NSAttributedStringKey: Any]

        let _6TextTextHeight: CGFloat = _6TextTextContent.boundingRect(with: CGSize(width: _6TextRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: _6TextFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: _6TextRect)
        _6TextTextContent.draw(in: CGRect(x: _6TextRect.minX, y: _6TextRect.minY + (_6TextRect.height - _6TextTextHeight) / 2, width: _6TextRect.width, height: _6TextTextHeight), withAttributes: _6TextFontAttributes)
        context.restoreGState()


        //// 5Text Drawing
        let _5TextRect = CGRect(x: 24, y: 57, width: 38, height: 40)
        let _5TextTextContent = "5"
        let _5TextStyle = NSMutableParagraphStyle()
        _5TextStyle.alignment = .center
        let _5TextFontAttributes = [
            .font: UIFont(name: "AvenirNext-DemiBold", size: 25)!,
            .foregroundColor: StyleKit_Clock.numbersColor,
            .paragraphStyle: _5TextStyle,
        ] as [NSAttributedStringKey: Any]

        let _5TextTextHeight: CGFloat = _5TextTextContent.boundingRect(with: CGSize(width: _5TextRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: _5TextFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: _5TextRect)
        _5TextTextContent.draw(in: CGRect(x: _5TextRect.minX, y: _5TextRect.minY + (_5TextRect.height - _5TextTextHeight) / 2, width: _5TextRect.width, height: _5TextTextHeight), withAttributes: _5TextFontAttributes)
        context.restoreGState()


        //// 4Text Drawing
        let _4TextRect = CGRect(x: 57.5, y: 24, width: 38, height: 40)
        let _4TextTextContent = "4"
        let _4TextStyle = NSMutableParagraphStyle()
        _4TextStyle.alignment = .center
        let _4TextFontAttributes = [
            .font: UIFont(name: "AvenirNext-DemiBold", size: 25)!,
            .foregroundColor: StyleKit_Clock.numbersColor,
            .paragraphStyle: _4TextStyle,
        ] as [NSAttributedStringKey: Any]

        let _4TextTextHeight: CGFloat = _4TextTextContent.boundingRect(with: CGSize(width: _4TextRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: _4TextFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: _4TextRect)
        _4TextTextContent.draw(in: CGRect(x: _4TextRect.minX, y: _4TextRect.minY + (_4TextRect.height - _4TextTextHeight) / 2, width: _4TextRect.width, height: _4TextTextHeight), withAttributes: _4TextFontAttributes)
        context.restoreGState()


        //// 3Text Drawing
        let _3TextRect = CGRect(x: 71, y: -20, width: 38, height: 40)
        let _3TextTextContent = "3"
        let _3TextStyle = NSMutableParagraphStyle()
        _3TextStyle.alignment = .center
        let _3TextFontAttributes = [
            .font: UIFont(name: "AvenirNext-DemiBold", size: 25)!,
            .foregroundColor: StyleKit_Clock.numbersColor,
            .paragraphStyle: _3TextStyle,
        ] as [NSAttributedStringKey: Any]

        let _3TextTextHeight: CGFloat = _3TextTextContent.boundingRect(with: CGSize(width: _3TextRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: _3TextFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: _3TextRect)
        _3TextTextContent.draw(in: CGRect(x: _3TextRect.minX, y: _3TextRect.minY + (_3TextRect.height - _3TextTextHeight) / 2, width: _3TextRect.width, height: _3TextTextHeight), withAttributes: _3TextFontAttributes)
        context.restoreGState()


        //// 2Text Drawing
        let _2TextRect = CGRect(x: 57, y: -64, width: 38, height: 40)
        let _2TextTextContent = "2"
        let _2TextStyle = NSMutableParagraphStyle()
        _2TextStyle.alignment = .center
        let _2TextFontAttributes = [
            .font: UIFont(name: "AvenirNext-DemiBold", size: 25)!,
            .foregroundColor: StyleKit_Clock.numbersColor,
            .paragraphStyle: _2TextStyle,
        ] as [NSAttributedStringKey: Any]

        let _2TextTextHeight: CGFloat = _2TextTextContent.boundingRect(with: CGSize(width: _2TextRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: _2TextFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: _2TextRect)
        _2TextTextContent.draw(in: CGRect(x: _2TextRect.minX, y: _2TextRect.minY + (_2TextRect.height - _2TextTextHeight) / 2, width: _2TextRect.width, height: _2TextTextHeight), withAttributes: _2TextFontAttributes)
        context.restoreGState()


        //// 1Text Drawing
        let _1TextRect = CGRect(x: 24, y: -94.5, width: 38, height: 40)
        let _1TextTextContent = "1"
        let _1TextStyle = NSMutableParagraphStyle()
        _1TextStyle.alignment = .center
        let _1TextFontAttributes = [
            .font: UIFont(name: "AvenirNext-DemiBold", size: 25)!,
            .foregroundColor: StyleKit_Clock.numbersColor,
            .paragraphStyle: _1TextStyle,
        ] as [NSAttributedStringKey: Any]

        let _1TextTextHeight: CGFloat = _1TextTextContent.boundingRect(with: CGSize(width: _1TextRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: _1TextFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: _1TextRect)
        _1TextTextContent.draw(in: CGRect(x: _1TextRect.minX, y: _1TextRect.minY + (_1TextRect.height - _1TextTextHeight) / 2, width: _1TextRect.width, height: _1TextTextHeight), withAttributes: _1TextFontAttributes)
        context.restoreGState()


        //// 12Text Drawing
        let _12TextPath = UIBezierPath()
        _12TextPath.move(to: CGPoint(x: -6.27, y: -89.97))
        _12TextPath.addLine(to: CGPoint(x: -9.77, y: -87.09))
        _12TextPath.addLine(to: CGPoint(x: -11.52, y: -89.17))
        _12TextPath.addLine(to: CGPoint(x: -6, y: -93.62))
        _12TextPath.addLine(to: CGPoint(x: -3.27, y: -93.62))
        _12TextPath.addLine(to: CGPoint(x: -3.27, y: -75.92))
        _12TextPath.addLine(to: CGPoint(x: -6.27, y: -75.92))
        _12TextPath.addLine(to: CGPoint(x: -6.27, y: -89.97))
        _12TextPath.close()
        _12TextPath.move(to: CGPoint(x: 0.73, y: -78.67))
        _12TextPath.addLine(to: CGPoint(x: 7.55, y: -85.37))
        _12TextPath.addCurve(to: CGPoint(x: 8.86, y: -86.98), controlPoint1: CGPoint(x: 8.1, y: -85.9), controlPoint2: CGPoint(x: 8.54, y: -86.44))
        _12TextPath.addCurve(to: CGPoint(x: 9.35, y: -88.84), controlPoint1: CGPoint(x: 9.19, y: -87.52), controlPoint2: CGPoint(x: 9.35, y: -88.14))
        _12TextPath.addCurve(to: CGPoint(x: 8.54, y: -90.83), controlPoint1: CGPoint(x: 9.35, y: -89.68), controlPoint2: CGPoint(x: 9.08, y: -90.34))
        _12TextPath.addCurve(to: CGPoint(x: 6.53, y: -91.57), controlPoint1: CGPoint(x: 8, y: -91.32), controlPoint2: CGPoint(x: 7.33, y: -91.57))
        _12TextPath.addCurve(to: CGPoint(x: 4.48, y: -90.71), controlPoint1: CGPoint(x: 5.67, y: -91.57), controlPoint2: CGPoint(x: 4.99, y: -91.28))
        _12TextPath.addCurve(to: CGPoint(x: 3.53, y: -88.54), controlPoint1: CGPoint(x: 3.96, y: -90.13), controlPoint2: CGPoint(x: 3.64, y: -89.41))
        _12TextPath.addLine(to: CGPoint(x: 0.6, y: -88.99))
        _12TextPath.addCurve(to: CGPoint(x: 1.23, y: -91.02), controlPoint1: CGPoint(x: 0.68, y: -89.73), controlPoint2: CGPoint(x: 0.89, y: -90.4))
        _12TextPath.addCurve(to: CGPoint(x: 2.5, y: -92.62), controlPoint1: CGPoint(x: 1.56, y: -91.64), controlPoint2: CGPoint(x: 1.98, y: -92.17))
        _12TextPath.addCurve(to: CGPoint(x: 4.31, y: -93.68), controlPoint1: CGPoint(x: 3.02, y: -93.07), controlPoint2: CGPoint(x: 3.62, y: -93.42))
        _12TextPath.addCurve(to: CGPoint(x: 6.58, y: -94.07), controlPoint1: CGPoint(x: 5, y: -93.94), controlPoint2: CGPoint(x: 5.76, y: -94.07))
        _12TextPath.addCurve(to: CGPoint(x: 8.79, y: -93.74), controlPoint1: CGPoint(x: 7.34, y: -94.07), controlPoint2: CGPoint(x: 8.08, y: -93.96))
        _12TextPath.addCurve(to: CGPoint(x: 10.68, y: -92.76), controlPoint1: CGPoint(x: 9.5, y: -93.53), controlPoint2: CGPoint(x: 10.12, y: -93.2))
        _12TextPath.addCurve(to: CGPoint(x: 11.99, y: -91.13), controlPoint1: CGPoint(x: 11.23, y: -92.31), controlPoint2: CGPoint(x: 11.66, y: -91.77))
        _12TextPath.addCurve(to: CGPoint(x: 12.48, y: -88.89), controlPoint1: CGPoint(x: 12.31, y: -90.49), controlPoint2: CGPoint(x: 12.48, y: -89.74))
        _12TextPath.addCurve(to: CGPoint(x: 12.25, y: -87.31), controlPoint1: CGPoint(x: 12.48, y: -88.33), controlPoint2: CGPoint(x: 12.4, y: -87.8))
        _12TextPath.addCurve(to: CGPoint(x: 11.64, y: -85.92), controlPoint1: CGPoint(x: 12.1, y: -86.81), controlPoint2: CGPoint(x: 11.9, y: -86.35))
        _12TextPath.addCurve(to: CGPoint(x: 10.74, y: -84.68), controlPoint1: CGPoint(x: 11.38, y: -85.49), controlPoint2: CGPoint(x: 11.08, y: -85.07))
        _12TextPath.addCurve(to: CGPoint(x: 9.63, y: -83.54), controlPoint1: CGPoint(x: 10.4, y: -84.29), controlPoint2: CGPoint(x: 10.03, y: -83.91))
        _12TextPath.addLine(to: CGPoint(x: 4.53, y: -78.67))
        _12TextPath.addLine(to: CGPoint(x: 12.5, y: -78.67))
        _12TextPath.addLine(to: CGPoint(x: 12.5, y: -75.92))
        _12TextPath.addLine(to: CGPoint(x: 0.73, y: -75.92))
        _12TextPath.addLine(to: CGPoint(x: 0.73, y: -78.67))
        _12TextPath.close()
        StyleKit_Clock.numbersColor.setFill()
        _12TextPath.fill()



        context.restoreGState()
        
        context.restoreGState()

    }




    @objc(StyleKit_ClockResizingBehavior)
    public enum ResizingBehavior: Int {
        case aspectFit /// The content is proportionally resized to fit into the target rectangle.
        case aspectFill /// The content is proportionally resized to completely fill the target rectangle.
        case stretch /// The content is stretched to match the entire target rectangle.
        case center /// The content is centered in the target rectangle, but it is NOT resized.

        public func apply(rect: CGRect, target: CGRect) -> CGRect {
            if rect == target || target == CGRect.zero {
                return rect
            }

            var scales = CGSize.zero
            scales.width = abs(target.width / rect.width)
            scales.height = abs(target.height / rect.height)

            switch self {
                case .aspectFit:
                    scales.width = min(scales.width, scales.height)
                    scales.height = scales.width
                case .aspectFill:
                    scales.width = max(scales.width, scales.height)
                    scales.height = scales.width
                case .stretch:
                    break
                case .center:
                    scales.width = 1
                    scales.height = 1
            }

            var result = rect.standardized
            result.size.width *= scales.width
            result.size.height *= scales.height
            result.origin.x = target.minX + (target.width - result.width) / 2
            result.origin.y = target.minY + (target.height - result.height) / 2
            return result
        }
    }
}



private extension UIColor {
    func blended(withFraction fraction: CGFloat, of color: UIColor) -> UIColor {
        var r1: CGFloat = 1, g1: CGFloat = 1, b1: CGFloat = 1, a1: CGFloat = 1
        var r2: CGFloat = 1, g2: CGFloat = 1, b2: CGFloat = 1, a2: CGFloat = 1

        self.getRed(&r1, green: &g1, blue: &b1, alpha: &a1)
        color.getRed(&r2, green: &g2, blue: &b2, alpha: &a2)

        return UIColor(red: r1 * (1 - fraction) + r2 * fraction,
            green: g1 * (1 - fraction) + g2 * fraction,
            blue: b1 * (1 - fraction) + b2 * fraction,
            alpha: a1 * (1 - fraction) + a2 * fraction);
    }
}
